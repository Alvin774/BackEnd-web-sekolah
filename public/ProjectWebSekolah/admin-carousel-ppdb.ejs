<%- include('partials/header-admin') %>
  <style>
    :root {
      --primary-green: #2ecc71;
      --dark-green: #27ae60;
      --bg-light: #f5f5f5;
      --text-dark: #2c3e50;
    }
    body {
      background-color: var(--bg-light);
      font-family: 'Poppins', sans-serif;
      color: var(--text-dark);
      padding: 20px;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      background: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    h2 {
      text-align: center;
      margin-bottom: 30px;
      color: var(--dark-green);
    }
    .form-label {
      font-weight: 600;
    }
    .btn-success {
      background-color: var(--primary-green);
      border-color: var(--primary-green);
    }
    .btn-success:hover {
      background-color: var(--dark-green);
      border-color: var(--dark-green);
    }
    .btn-danger {
      background-color: #e74c3c;
      border-color: #e74c3c;
      color: #fff;
    }
    .btn-danger:hover {
      background-color: #c0392b;
      border-color: #c0392b;
    }
    /* Styling untuk grid kartu carousel */
    .carousel-card {
      margin-bottom: 20px;
    }
    .carousel-card img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      border-radius: 5px;
    }
  </style>
    <style>
      :root {
        --primary-green: #2ecc71;
        --dark-green: #27ae60;
        --bg-light: #f5f5f5;
        --text-dark: #2c3e50;
      }
      body {
        background-color: var(--bg-light);
        font-family: 'Poppins', sans-serif;
        color: var(--text-dark);
        padding: 20px;
      }
      .container {
        max-width: 900px;
        margin: 0 auto;
        background: #fff;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-bottom: 40px;
      }
      h2, h3 {
        text-align: center;
        margin-bottom: 20px;
        color: var(--dark-green);
      }
      .section-title {
        border-bottom: 2px solid var(--primary-green);
        padding-bottom: 5px;
        margin-bottom: 20px;
      }
      .form-label {
        font-weight: 600;
      }
      .btn-success {
        background-color: var(--primary-green);
        border-color: var(--primary-green);
      }
      .btn-success:hover {
        background-color: var(--dark-green);
        border-color: var(--dark-green);
      }
      .btn-danger {
        background-color: #e74c3c;
        border-color: #e74c3c;
        color: #fff;
      }
      .btn-danger:hover {
        background-color: #c0392b;
        border-color: #c0392b;
      }
      /* Preview styling untuk PPDB Info & Brosur */
      .preview-card {
        border: 1px solid var(--primary-green);
        border-radius: 5px;
        padding: 15px;
        background: #f9f9f9;
        text-align: center;
        margin-bottom: 20px;
      }
      .preview-card img {
        width: 100%;
        max-height: 200px;
        object-fit: cover;
        border-radius: 5px;
        margin-bottom: 10px;
      }
      /* Styling untuk grid alur pendaftaran */
      .alur-card img {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 50%;
      }
      .alur-card {
        margin-bottom: 20px;
      }
    </style>
  <div class="container">
    <h2>Kelola PPDB Carousel</h2>
    <!-- Form Input untuk Tambah Slide -->
    <form id="carouselForm" enctype="multipart/form-data" class="mb-4">
      <!-- Input tersembunyi untuk ID (jika dalam mode edit; untuk saat ini kita fokus pada tambah dan hapus) -->
      <input type="hidden" id="carouselId" name="carouselId">
      <div class="mb-3">
        <label for="captionTitle" class="form-label">Judul Caption</label>
        <input type="text" class="form-control" id="captionTitle" name="captionTitle" placeholder="Masukkan judul slide" required>
      </div>
      <div class="mb-3">
        <label for="captionDescription" class="form-label">Deskripsi Caption</label>
        <textarea class="form-control" id="captionDescription" name="captionDescription" rows="3" placeholder="Masukkan deskripsi slide" required></textarea>
      </div>
      <div class="mb-3">
        <label for="linkUrl" class="form-label">Link URL (Opsional)</label>
        <input type="url" class="form-control" id="linkUrl" name="linkUrl" placeholder="Contoh: https://contoh.com">
      </div>
      <div class="mb-3">
        <label for="order" class="form-label">Urutan (Opsional)</label>
        <input type="number" class="form-control" id="order" name="order" placeholder="Masukkan nomor urut slide">
      </div>
      <div class="mb-3">
        <label for="carouselImage" class="form-label">Upload Gambar</label>
        <input type="file" class="form-control" id="carouselImage" name="image" required>
      </div>
      <div class="d-flex">
        <button type="submit" class="btn btn-success me-2" id="submitCarouselBtn">Simpan Slide</button>
        <button type="button" class="btn btn-secondary" id="resetCarouselBtn">Reset Form</button>
      </div>
    </form>

    <!-- Preview Section (Opsional) -->
    <div class="mb-4">
      <h4 class="mb-3">Preview Slide</h4>
      <div class="card mb-3">
        <img src="img/default-ppdb.jpg" alt="Preview Gambar" id="previewCarouselImage" class="card-img-top">
        <div class="card-body text-center">
          <h5 id="previewCaptionTitle">Judul Slide</h5>
          <p id="previewCaptionDescription">Deskripsi slide akan tampil di sini.</p>
        </div>
      </div>
    </div>

    <!-- Daftar Slide Carousel -->
    <h4 class="mb-3">Daftar Slide Carousel</h4>
    <div class="row" id="carouselList">
      <!-- Kartu slide akan dimuat secara dinamis di sini -->
    </div>
  </div>




  <div class="container">
    <!-- Bagian 1: PPDB Info -->
    <section id="ppdbInfoSection">
      <h3 class="section-title">Informasi Penting & Periode PPDB</h3>
      <!-- Form PPDB Info -->
      <form id="ppdbInfoForm" class="mb-3">
        <input type="hidden" id="ppdbInfoId" name="ppdbInfoId">
        <div class="mb-3">
          <label for="infoText" class="form-label">Informasi Penting</label>
          <input type="text" class="form-control" id="infoText" name="infoText" placeholder="[Informasi Penting]" required>
        </div>
        <div class="row">
          <div class="mb-3 col-md-6">
            <label for="registrationStart" class="form-label">Tanggal Mulai Pendaftaran</label>
            <input type="date" class="form-control" id="registrationStart" name="registrationStart" required>
          </div>
          <div class="mb-3 col-md-6">
            <label for="registrationEnd" class="form-label">Tanggal Akhir Pendaftaran</label>
            <input type="date" class="form-control" id="registrationEnd" name="registrationEnd" required>
          </div>
        </div>
        <div class="d-flex">
          <button type="submit" class="btn btn-success me-2" id="submitPPDBInfoBtn">Simpan Info</button>
          <button type="button" class="btn btn-danger" id="deletePPDBInfoBtn" style="display: none;">Hapus Info</button>
        </div>
      </form>
      <!-- Preview PPDB Info -->
      <div class="preview-card" id="ppdbInfoPreview">
        <h5 id="previewInfoText">[Informasi Penting]</h5>
        <p>
          Pendaftaran akan dimulai: <span id="previewRegistrationStart">-</span> s/d <span id="previewRegistrationEnd">-</span>
        </p>
      </div>
    </section>

    <hr>

    <!-- Bagian 2: PPDB Brosur -->
    <section id="ppdbBrosurSection">
      <h3 class="section-title">PPDB Brosur</h3>
      <!-- Form PPDB Brosur -->
      <form id="ppdbBrosurForm" enctype="multipart/form-data" class="mb-3">
        <input type="hidden" id="ppdbBrosurId" name="ppdbBrosurId">
        <div class="mb-3">
          <label for="brosurImage" class="form-label">Upload Gambar Brosur</label>
          <input type="file" class="form-control" id="brosurImage" name="image" required>
        </div>
        <div class="d-flex">
          <button type="submit" class="btn btn-success me-2" id="submitBrosurBtn">Simpan Brosur</button>
          <button type="button" class="btn btn-danger" id="deleteBrosurBtn" style="display: none;">Hapus Brosur</button>
        </div>
      </form>
      <!-- Preview PPDB Brosur -->
      <div class="preview-card" id="ppdbBrosurPreview">
        <img src="img/default-ppdb.jpg" alt="Preview Brosur" id="previewBrosurImage">
      </div>
    </section>

    <hr>

    <!-- Bagian 3: Alur Pendaftaran -->
    <section id="alurPendaftaranSection">
      <h3 class="section-title">Alur Pendaftaran Siswa/i Baru</h3>
      <!-- Form Alur Pendaftaran -->
      <form id="alurForm" enctype="multipart/form-data" class="mb-3">
        <input type="hidden" id="alurId" name="alurId">
        <div class="row">
          <div class="mb-3 col-md-4">
            <label for="stepNumber" class="form-label">Nomor Langkah</label>
            <input type="number" class="form-control" id="stepNumber" name="stepNumber" required>
          </div>
          <div class="mb-3 col-md-8">
            <label for="alurDescription" class="form-label">Deskripsi Langkah</label>
            <input type="text" class="form-control" id="alurDescription" name="description" placeholder="Deskripsi langkah pendaftaran" required>
          </div>
        </div>
        <div class="mb-3">
          <label for="alurImage" class="form-label">Upload Gambar Langkah</label>
          <input type="file" class="form-control" id="alurImage" name="image" required>
        </div>
        <div class="d-flex">
          <button type="submit" class="btn btn-success me-2" id="submitAlurBtn">Simpan Langkah</button>
          <button type="button" class="btn btn-danger" id="deleteAlurBtn" style="display: none;">Hapus Langkah</button>
        </div>
      </form>
      <!-- Preview Alur Pendaftaran -->
      <div class="mb-3">
        <h5 class="text-center">Preview Langkah Pendaftaran</h5>
        <div class="card preview-card" id="alurPreview">
          <img src="img/default-ppdb.jpg" alt="Preview Langkah" id="previewAlurImage">
          <div class="card-body text-center">
            <h6 id="previewStepNumber">Langkah -</h6>
            <p id="previewAlurDescription">Deskripsi langkah pendaftaran akan tampil di sini.</p>
          </div>
        </div>
      </div>
      <!-- Daftar Alur Pendaftaran -->
      <div class="row" id="alurList">
        <!-- Kartu alur pendaftaran akan dimuat secara dinamis -->
      </div>
    </section>
  </div>



  <!-- JavaScript -->
  <script>
    // Update preview secara real time untuk text input
    function updateCarouselPreview() {
      const captionTitle = document.getElementById('captionTitle').value;
      const captionDescription = document.getElementById('captionDescription').value;
      document.getElementById('previewCaptionTitle').innerText = captionTitle || 'Judul Slide';
      document.getElementById('previewCaptionDescription').innerText = captionDescription || 'Deskripsi slide akan tampil di sini.';
    }
    document.getElementById('captionTitle').addEventListener('input', updateCarouselPreview);
    document.getElementById('captionDescription').addEventListener('input', updateCarouselPreview);

    // Update preview gambar saat file diupload
    document.getElementById('carouselImage').addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById('previewCarouselImage').src = e.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        document.getElementById('previewCarouselImage').src = 'img/default-ppdb.jpg';
      }
    });

    // Reset form dan preview
    document.getElementById('resetCarouselBtn').addEventListener('click', function() {
      document.getElementById('carouselForm').reset();
      updateCarouselPreview();
      document.getElementById('previewCarouselImage').src = 'img/default-ppdb.jpg';
    });

    // Form submission untuk tambah slide
    document.getElementById('carouselForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const formData = new FormData(this);
      try {
        // Karena untuk halaman admin, kita fokus pada penambahan (tambah) slide.
        const response = await fetch('/api/ppdbcarousel', {
          method: 'POST',
          body: formData
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          document.getElementById('carouselForm').reset();
          updateCarouselPreview();
          document.getElementById('previewCarouselImage').src = 'img/default-ppdb.jpg';
          loadCarousel();
        } else {
          alert(result.message || "Gagal menyimpan slide.");
        }
      } catch (error) {
        console.error("Error submitting carousel form:", error);
        alert("Terjadi kesalahan saat mengirim data.");
      }
    });

    // Fungsi untuk memuat daftar slide dari API
    async function loadCarousel() {
      try {
        const response = await fetch('/api/ppdbcarousel');
        if (!response.ok) {
          throw new Error('Gagal mengambil data PPDB Carousel');
        }
        const slides = await response.json();
        const container = document.getElementById('carouselList');
        container.innerHTML = ""; // Kosongkan kontainer

        if (slides.length === 0) {
          container.innerHTML = '<p class="text-center">Tidak ada data slide.</p>';
          return;
        }

        // Urutkan berdasarkan field order jika tersedia
        slides.sort((a, b) => a.order - b.order);

        slides.forEach((slide, index) => {
          const colDiv = document.createElement('div');
          colDiv.className = "col-12 col-sm-6 col-md-4 carousel-card";
          colDiv.innerHTML = `
            <div class="card">
              <img src="${slide.imageUrl}" class="card-img-top" alt="${slide.captionTitle}">
              <div class="card-body text-center">
                <h5 class="card-text fw-bold">${slide.captionTitle}</h5>
                <p class="card-text">${slide.captionDescription}</p>
                <button class="btn btn-danger btn-sm" onclick="deleteSlide(${slide.id})">Hapus</button>
              </div>
            </div>
          `;
          container.appendChild(colDiv);
        });
      } catch (error) {
        console.error("Error loading carousel:", error);
        alert("Terjadi kesalahan saat memuat data PPDB Carousel.");
      }
    }

    // Fungsi untuk menghapus slide berdasarkan ID
    async function deleteSlide(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus slide ini?")) return;
      try {
        const response = await fetch(`/api/ppdbcarousel/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          loadCarousel();
        } else {
          alert(result.message || "Gagal menghapus slide.");
        }
      } catch (error) {
        console.error("Error deleting slide:", error);
        alert("Terjadi kesalahan saat menghapus slide.");
      }
    }

    // Panggil loadCarousel saat halaman selesai dimuat
    document.addEventListener("DOMContentLoaded", loadCarousel);
  </script>


<script>
  /* ---------- PPDB Info ---------- */
  async function loadPPDBInfo() {
    try {
      const response = await fetch('/api/ppdbinfo');
      if (!response.ok) throw new Error('Gagal mengambil data PPDB Info');
      // Jika API mengembalikan array, ambil record pertama (asumsi hanya ada satu data)
      const data = Array.isArray(await response.json()) ? (await response.json())[0] : await response.json();
      if (data) {
        document.getElementById('ppdbInfoId').value = data.id || "";
        document.getElementById('infoText').value = data.infoText || "";
        document.getElementById('registrationStart').value = data.registrationStart || "";
        document.getElementById('registrationEnd').value = data.registrationEnd || "";

        // Update preview
        document.getElementById('previewInfoText').innerText = data.infoText || "[Informasi Penting]";
        const startDate = data.registrationStart ? new Date(data.registrationStart).toLocaleDateString() : "-";
        const endDate = data.registrationEnd ? new Date(data.registrationEnd).toLocaleDateString() : "-";
        // Tampilkan tombol hapus jika data ada
        document.getElementById('deletePPDBInfoBtn').style.display = "inline-block";
      }
    } catch (error) {
      console.error("Error loading PPDB Info:", error);
    }
  }

  document.getElementById('ppdbInfoForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const payload = {
      infoText: document.getElementById('infoText').value,
      registrationStart: document.getElementById('registrationStart').value,
      registrationEnd: document.getElementById('registrationEnd').value
    };
    try {
      let response;
      const id = document.getElementById('ppdbInfoId').value;
      if (id) {
        // Update (PUT) – (untuk saat ini kita fokus pada tambah dan hapus; update bisa ditambahkan jika diperlukan)
        response = await fetch(`/api/ppdbinfo/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
      } else {
        // Tambah (POST)
        response = await fetch('/api/ppdbinfo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
      }
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        loadPPDBInfo();
      } else {
        alert(result.message || "Gagal menyimpan data PPDB Info.");
      }
    } catch (error) {
      console.error("Error submitting PPDB Info form:", error);
      alert("Terjadi kesalahan saat mengirim data PPDB Info.");
    }
  });

  document.getElementById('deletePPDBInfoBtn').addEventListener('click', async function() {
    if (!confirm("Apakah Anda yakin ingin menghapus data PPDB Info ini?")) return;
    try {
      const id = document.getElementById('ppdbInfoId').value;
      const response = await fetch(`/api/ppdbinfo/${id}`, { method: 'DELETE' });
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        // Reset form dan preview
        document.getElementById('ppdbInfoForm').reset();
        document.getElementById('deletePPDBInfoBtn').style.display = "none";
        loadPPDBInfo();
      } else {
        alert(result.message || "Gagal menghapus data PPDB Info.");
      }
    } catch (error) {
      console.error("Error deleting PPDB Info:", error);
      alert("Terjadi kesalahan saat menghapus data PPDB Info.");
    }
  });

  /* ---------- PPDB Brosur ---------- */
  async function loadPPDBBrosur() {
    try {
      const response = await fetch('/api/ppdbbrosur');
      if (!response.ok) throw new Error('Gagal mengambil data PPDB Brosur');
      // Ambil record pertama jika API mengembalikan array
      const data = Array.isArray(await response.json()) ? (await response.json())[0] : await response.json();
      if (data) {
        document.getElementById('ppdbBrosurId').value = data.id || "";
        document.getElementById('brosurImage').value = ""; // File input tidak dapat diisi otomatis
        document.getElementById('previewBrosurImage').src = data.imageUrl || "img/default-ppdb.jpg";
        document.getElementById('deleteBrosurBtn').style.display = "inline-block";
      }
    } catch (error) {
      console.error("Error loading PPDB Brosur:", error);
    }
  }

  document.getElementById('ppdbBrosurForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    try {
      let response;
      const id = document.getElementById('ppdbBrosurId').value;
      if (id) {
        response = await fetch(`/api/ppdbbrosur/${id}`, {
          method: 'PUT',
          body: formData
        });
      } else {
        response = await fetch('/api/ppdbbrosur', {
          method: 'POST',
          body: formData
        });
      }
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        document.getElementById('ppdbBrosurForm').reset();
        loadPPDBBrosur();
      } else {
        alert(result.message || "Gagal menyimpan data PPDB Brosur.");
      }
    } catch (error) {
      console.error("Error submitting PPDB Brosur form:", error);
      alert("Terjadi kesalahan saat mengirim data PPDB Brosur.");
    }
  });

  document.getElementById('deleteBrosurBtn').addEventListener('click', async function() {
    if (!confirm("Apakah Anda yakin ingin menghapus data PPDB Brosur ini?")) return;
    try {
      const id = document.getElementById('ppdbBrosurId').value;
      const response = await fetch(`/api/ppdbbrosur/${id}`, {
        method: 'DELETE'
      });
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        document.getElementById('ppdbBrosurForm').reset();
        document.getElementById('deleteBrosurBtn').style.display = "none";
        loadPPDBBrosur();
      } else {
        alert(result.message || "Gagal menghapus data PPDB Brosur.");
      }
    } catch (error) {
      console.error("Error deleting PPDB Brosur:", error);
      alert("Terjadi kesalahan saat menghapus data PPDB Brosur.");
    }
  });

  /* ---------- Alur Pendaftaran ---------- */
  async function loadAlurPendaftaran() {
    try {
      const response = await fetch('/api/alurpendaftaran');
      if (!response.ok) throw new Error('Gagal mengambil data alur pendaftaran');
      const steps = await response.json();
      const container = document.getElementById('alurList');
      container.innerHTML = "";
      if (steps.length === 0) {
        container.innerHTML = '<p class="text-center">Tidak ada data alur pendaftaran.</p>';
        return;
      }
      // Urutkan berdasarkan stepNumber (ascending)
      steps.sort((a, b) => a.stepNumber - b.stepNumber);
      steps.forEach(step => {
        const colDiv = document.createElement('div');
        colDiv.className = "col-4 col-lg-2";
        colDiv.innerHTML = `
          <button class="btn btn-light w-100 mb-2 p-0 shadow-hover" type="button" data-bs-toggle="collapse" data-bs-target="#step${step.stepNumber}" aria-expanded="false" aria-controls="step${step.stepNumber}">
            <img src="${step.imageUrl}" alt="Step ${step.stepNumber}" class="img-fluid rounded-circle img-hover">
          </button>
          <div class="collapse" id="step${step.stepNumber}">
            <div class="card card-body border-0">
              ${step.description}
              <button class="btn btn-danger btn-sm mt-2" onclick="deleteAlur(${step.id})">Hapus</button>
            </div>
          </div>
        `;
        container.appendChild(colDiv);
      });
    } catch (error) {
      console.error("Error loading alur pendaftaran:", error);
      alert("Terjadi kesalahan saat memuat data alur pendaftaran.");
    }
  }

  // Form submission untuk Alur Pendaftaran
  document.getElementById('alurForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    try {
      let response;
      const id = document.getElementById('alurId').value;
      if (id) {
        response = await fetch(`/api/alurpendaftaran/${id}`, {
          method: 'PUT',
          body: formData
        });
      } else {
        response = await fetch('/api/alurpendaftaran', {
          method: 'POST',
          body: formData
        });
      }
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        document.getElementById('alurForm').reset();
        loadAlurPendaftaran();
      } else {
        alert(result.message || "Gagal menyimpan data alur pendaftaran.");
      }
    } catch (error) {
      console.error("Error submitting alur form:", error);
      alert("Terjadi kesalahan saat mengirim data alur pendaftaran.");
    }
  });

  // Fungsi untuk menghapus Alur Pendaftaran
  async function deleteAlur(id) {
    if (!confirm("Apakah Anda yakin ingin menghapus langkah pendaftaran ini?")) return;
    try {
      const response = await fetch(`/api/alurpendaftaran/${id}`, {
        method: 'DELETE'
      });
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        loadAlurPendaftaran();
      } else {
        alert(result.message || "Gagal menghapus data alur pendaftaran.");
      }
    } catch (error) {
      console.error("Error deleting alur pendaftaran:", error);
      alert("Terjadi kesalahan saat menghapus data alur pendaftaran.");
    }
  }

  // Panggil semua fungsi load saat DOM selesai dimuat
  document.addEventListener("DOMContentLoaded", function() {
    loadPPDBInfo();
    loadPPDBBrosur();
    loadAlurPendaftaran();
  });
</script>


  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
  ></script>
</body>
</html>

