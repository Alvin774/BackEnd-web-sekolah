<%- include('partials/header-admin') %>
  <style>
    :root {
      --primary-green: #2ecc71;
      --dark-green: #27ae60;
      --bg-light: #ecf9f1;
      --text-dark: #2c3e50;
    }
    body {
      background-color: var(--bg-light);
      font-family: 'Poppins', sans-serif;
      color: var(--text-dark);
      margin: 0;
      padding: 20px;
    }
    .container {
      max-width: 900px;
      margin: 40px auto;
      background: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    h2 {
      color: var(--dark-green);
      margin-bottom: 30px;
    }
    .guru-card {
      border: 1px solid var(--primary-green);
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    }
    .guru-card img {
      width: 120px;
      height: 120px;
      object-fit: cover;
      border-radius: 50%;
      margin-right: 20px;
    }
    .btn-edit {
      background-color: var(--primary-green);
      border-color: var(--primary-green);
      color: #fff;
    }
    .btn-edit:hover {
      background-color: var(--dark-green);
      border-color: var(--dark-green);
    }
    .btn-delete {
      background-color: #e74c3c;
      border-color: #e74c3c;
      color: #fff;
    }
    .btn-delete:hover {
      background-color: #c0392b;
      border-color: #c0392b;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2 class="text-center mb-4">Kelola Data Guru</h2>

    <!-- Form Guru: Tambah / Edit -->
    <div class="mb-4">
      <h4 id="formTitle">Tambah Guru</h4>
      <form id="guruForm">
        <!-- Input tersembunyi untuk ID (mode edit) -->
        <input type="hidden" id="guruId" name="guruId">
        <div class="mb-3">
          <label for="guruName" class="form-label">Nama Guru</label>
          <input type="text" class="form-control" id="guruName" name="name" required>
        </div>
        <div class="mb-3">
          <label for="guruNIP" class="form-label">NIP</label>
          <input type="text" class="form-control" id="guruNIP" name="nip">
        </div>
        <div class="mb-3">
          <label for="guruImage" class="form-label">Upload Foto Guru (Opsional)</label>
          <input type="file" class="form-control" id="guruImage" name="image">
        </div>
        <div class="d-flex">
          <button type="submit" class="btn btn-success me-2" id="submitBtn">Tambah Guru</button>
          <button type="button" class="btn btn-secondary" id="cancelEditBtn" style="display: none;">Batal Edit</button>
        </div>
      </form>
    </div>

    <!-- Daftar Guru -->
    <div id="guruList">
      <!-- Kartu guru akan dimuat secara dinamis di sini -->
    </div>
  </div>

  <script>
    // Fungsi untuk memuat data guru dari API
    async function loadGuru() {
      try {
        const response = await fetch('/api/guru');
        if (!response.ok) throw new Error('Failed to fetch guru data');
        const gurus = await response.json();
        const container = document.getElementById('guruList');
        container.innerHTML = "";
        if (gurus.length === 0) {
          container.innerHTML = "<p class='text-center'>Tidak ada data guru.</p>";
          return;
        }
        gurus.forEach(guru => {
          const card = document.createElement('div');
          card.className = "guru-card d-flex";
          card.innerHTML = `
            <img src="${guru.imageUrl ? guru.imageUrl : 'img/default-guru.jpg'}" alt="Foto Guru">
            <div class="flex-grow-1">
              <h6 class="fw-bold mb-1">${guru.name}</h6>
              <p class="text-muted mb-1">NIP: ${guru.nip ? guru.nip : '-'}</p>
              <button class="btn btn-edit btn-sm me-2" onclick="editGuru(${guru.id})">Edit</button>
              <button class="btn btn-delete btn-sm" onclick="deleteGuru(${guru.id})">Hapus</button>
            </div>
          `;
          container.appendChild(card);
        });
      } catch (error) {
        console.error("Error loading guru:", error);
        alert("Terjadi kesalahan saat memuat data guru.");
      }
    }
    
    // Fungsi untuk mengirim data form (tambah atau update guru)
    async function submitGuruForm(e) {
      e.preventDefault();
      const guruId = document.getElementById('guruId').value;
      const form = document.getElementById('guruForm');
      const formData = new FormData(form);
      try {
        let response;
        if (guruId) {
          // Update guru
          response = await fetch(`/api/guru/${guruId}`, {
            method: 'PUT',
            body: formData
          });
        } else {
          // Tambah guru baru
          response = await fetch('/api/guru', {
            method: 'POST',
            body: formData
          });
        }
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          resetGuruForm();
          loadGuru();
        } else {
          alert(result.message || "Gagal menyimpan data guru.");
        }
      } catch (error) {
        console.error("Error submitting guru form:", error);
        alert("Terjadi kesalahan saat mengirim data.");
      }
    }
    
    // Fungsi untuk mengisi form dengan data guru (mode edit)
    async function editGuru(id) {
      try {
        const response = await fetch('/api/guru');
        if (!response.ok) throw new Error("Failed to fetch guru data");
        const gurus = await response.json();
        const guru = gurus.find(g => g.id === id);
        if (!guru) {
          alert("Data guru tidak ditemukan.");
          return;
        }
        document.getElementById('guruId').value = guru.id;
        document.getElementById('guruName').value = guru.name;
        document.getElementById('guruNIP').value = guru.nip || "";
        // Input file tidak dapat diisi otomatis
        document.getElementById('formTitle').innerText = "Edit Guru";
        document.getElementById('submitBtn').innerText = "Update Guru";
        document.getElementById('cancelEditBtn').style.display = "inline-block";
      } catch (error) {
        console.error("Error editing guru:", error);
        alert("Terjadi kesalahan saat mengambil data untuk edit.");
      }
    }
    
    // Fungsi untuk menghapus data guru
    async function deleteGuru(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus data guru ini?")) return;
      try {
        const response = await fetch(`/api/guru/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          loadGuru();
        } else {
          alert(result.message || "Gagal menghapus data guru.");
        }
      } catch (error) {
        console.error("Error deleting guru:", error);
        alert("Terjadi kesalahan saat menghapus data guru.");
      }
    }
    
    // Fungsi untuk mereset form ke mode tambah
    function resetGuruForm() {
      document.getElementById('guruForm').reset();
      document.getElementById('guruId').value = "";
      document.getElementById('formTitle').innerText = "Tambah Guru";
      document.getElementById('submitBtn').innerText = "Tambah Guru";
      document.getElementById('cancelEditBtn').style.display = "none";
    }
    
    document.getElementById('guruForm').addEventListener('submit', submitGuruForm);
    document.getElementById('cancelEditBtn').addEventListener('click', resetGuruForm);
    document.addEventListener("DOMContentLoaded", loadGuru);
  </script>

  <!-- Bootstrap JS Bundle -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"
  ></script>
  <style>
    body {
      background-color: #f5f5f5;
      font-family: 'Poppins', sans-serif;
      color: #2c3e50;
      padding: 20px;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px 30px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      margin-bottom: 40px;
    }
    h2, h3 {
      text-align: center;
      margin-bottom: 20px;
      color: #27ae60;
    }
    .form-label {
      font-weight: 600;
    }
    .btn-success {
      background-color: #2ecc71;
      border: none;
    }
    .btn-danger {
      background-color: #e74c3c;
      border: none;
    }
    /* Preview card styling */
    .preview-card {
      border: 1px solid #2ecc71;
      border-radius: 5px;
      padding: 15px;
      background: #f9f9f9;
      text-align: center;
      margin-bottom: 20px;
    }
    .preview-card img {
      width: 100%;
      max-height: 200px;
      object-fit: cover;
      border-radius: 5px;
      margin-bottom: 10px;
    }
    /* Card grid untuk daftar prestasi */
    #cardPrestasi .card {
      margin-bottom: 20px;
    }
    #cardPrestasi .card img {
      height: 200px;
      object-fit: cover;
    }
  </style>
  <div class="container">
    <h2>Kelola Prestasi</h2>

    <!-- Form Prestasi -->
    <form id="prestasiForm" enctype="multipart/form-data" class="mb-4">
      <!-- Hidden field untuk mode edit -->
      <input type="hidden" id="prestasiId" name="prestasiId">
      <div class="mb-3">
        <label for="title" class="form-label">Judul Prestasi</label>
        <input type="text" class="form-control" id="title" name="title" placeholder="Masukkan judul prestasi" required>
      </div>
      <div class="mb-3">
        <label for="pringkat" class="form-label">Peringkat</label>
        <input type="text" class="form-control" id="pringkat" name="pringkat" placeholder="Contoh: Juara 1" required>
      </div>
      <div class="mb-3">
        <label for="description" class="form-label">Deskripsi</label>
        <textarea class="form-control" id="description" name="description" rows="3" placeholder="Masukkan deskripsi prestasi" required></textarea>
      </div>
      <div class="mb-3">
        <label for="prestasiImage" class="form-label">Upload Gambar</label>
        <input type="file" class="form-control" id="prestasiImage" name="image" required>
      </div>
      <div class="d-flex">
        <button type="submit" class="btn btn-success me-2" id="submitPrestasiBtn">Simpan Prestasi</button>
        <button type="reset" class="btn btn-secondary" id="resetPrestasiBtn">Reset Form</button>
      </div>
    </form>

    <!-- Preview Prestasi -->
    <div class="preview-card mb-4" id="prestasiPreview">
      <img src="img/default-prestasi.jpg" alt="Preview Prestasi" id="previewPrestasiImage">
      <h5 id="previewTitle">Judul Prestasi</h5>
      <p id="previewPeringkat"><strong>Peringkat:</strong> -</p>
      <p id="previewDescription">Deskripsi prestasi akan tampil di sini.</p>
    </div>

    <!-- Daftar Prestasi -->
    <h3 class="mb-3">Daftar Prestasi</h3>
    <div class="row" id="cardPrestasi">
      <!-- Card prestasi akan dimuat secara dinamis di sini -->
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    // Fungsi untuk mengupdate preview prestasi secara real-time
    function updatePrestasiPreview() {
      const title = document.getElementById('title').value;
      const pringkat = document.getElementById('pringkat').value;
      const description = document.getElementById('description').value;
      document.getElementById('previewTitle').innerText = title || 'Judul Prestasi';
      document.getElementById('previewPeringkat').innerHTML = pringkat ? `<strong>Peringkat:</strong> ${pringkat}` : `<strong>Peringkat:</strong> -`;
      document.getElementById('previewDescription').innerText = description || 'Deskripsi prestasi akan tampil di sini.';
    }
    document.getElementById('title').addEventListener('input', updatePrestasiPreview);
    document.getElementById('pringkat').addEventListener('input', updatePrestasiPreview);
    document.getElementById('description').addEventListener('input', updatePrestasiPreview);

    // Update preview gambar ketika file diupload
    document.getElementById('prestasiImage').addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById('previewPrestasiImage').src = e.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        document.getElementById('previewPrestasiImage').src = 'img/default-prestasi.jpg';
      }
    });

    // Fungsi untuk load data prestasi dari API dan menampilkannya sebagai card
    async function loadPrestasi() {
      try {
        const response = await fetch('/api/prestasi');
        if (!response.ok) throw new Error('Gagal mengambil data prestasi');
        const prestasiList = await response.json();
        const container = document.getElementById('cardPrestasi');
        container.innerHTML = "";
        if (prestasiList.length === 0) {
          container.innerHTML = '<p class="text-center">Belum ada data prestasi.</p>';
          return;
        }
        prestasiList.forEach(prestasi => {
          const colDiv = document.createElement('div');
          colDiv.className = "col-12 col-sm-6 col-md-4 mb-3";
          colDiv.innerHTML = `
            <div class="card card-prestasi">
              <img src="${prestasi.imageUrl}" class="card-img-top" alt="${prestasi.title}">
              <div class="card-body">
                <h5 class="card-title">${prestasi.title}</h5>
                <p class="card-text"><strong>${prestasi.pringkat}</strong></p>
                <p class="card-text">${prestasi.description}</p>
                <button class="btn btn-success btn-sm" onclick="editPrestasi(${prestasi.id})">Edit</button>
                <button class="btn btn-danger btn-sm" onclick="deletePrestasi(${prestasi.id})">Hapus</button>
              </div>
            </div>
          `;
          container.appendChild(colDiv);
        });
      } catch (error) {
        console.error("Error loading prestasi:", error);
        alert("Terjadi kesalahan saat memuat data prestasi.");
      }
    }

    // Form submission untuk tambah/update prestasi
    document.getElementById('prestasiForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const form = this;
      const formData = new FormData(form);
      try {
        let response;
        const id = document.getElementById('prestasiId').value;
        if (id) {
          // Update (PUT)
          response = await fetch(`/api/prestasi/${id}`, {
            method: 'PUT',
            body: formData
          });
        } else {
          // Tambah (POST)
          response = await fetch('/api/prestasi', {
            method: 'POST',
            body: formData
          });
        }
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          form.reset();
          document.getElementById('previewPrestasiImage').src = 'img/default-prestasi.jpg';
          updatePrestasiPreview();
          loadPrestasi();
        } else {
          alert(result.message || "Gagal menyimpan data prestasi.");
        }
      } catch (error) {
        console.error("Error submitting prestasi form:", error);
        alert("Terjadi kesalahan saat mengirim data prestasi.");
      }
    });

    // Fungsi untuk mengisi form untuk edit data prestasi
    async function editPrestasi(id) {
      try {
        const response = await fetch('/api/prestasi');
        if (!response.ok) throw new Error('Gagal mengambil data prestasi');
        const prestasiList = await response.json();
        const prestasi = prestasiList.find(item => item.id === id);
        if (prestasi) {
          document.getElementById('prestasiId').value = prestasi.id;
          document.getElementById('title').value = prestasi.title;
          document.getElementById('pringkat').value = prestasi.pringkat;
          document.getElementById('description').value = prestasi.description;
          // File input tidak dapat diisi secara otomatis, tapi update preview gambar
          document.getElementById('previewPrestasiImage').src = prestasi.imageUrl;
          updatePrestasiPreview();
        }
      } catch (error) {
        console.error("Error editing prestasi:", error);
        alert("Terjadi kesalahan saat mengambil data untuk edit.");
      }
    }

    // Fungsi untuk menghapus data prestasi
    async function deletePrestasi(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus data prestasi ini?")) return;
      try {
        const response = await fetch(`/api/prestasi/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          loadPrestasi();
        } else {
          alert(result.message || "Gagal menghapus data prestasi.");
        }
      } catch (error) {
        console.error("Error deleting prestasi:", error);
        alert("Terjadi kesalahan saat menghapus data prestasi.");
      }
    }

    document.addEventListener("DOMContentLoaded", loadPrestasi);
  </script>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
</body>
</html>
