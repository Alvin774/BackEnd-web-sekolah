<%- include('partials/header-admin') %>

  <style>
    :root {

      --primary-green: #2ecc71;
      --dark-green: #27ae60;
      --bg-light: #ecf9f1;
      --text-dark: #2c3e50;
    }
    body {
      background-color: var(--bg-light);
      font-family: 'Poppins', sans-serif;
      color: var(--text-dark);
      margin: 0;
      padding: 20px;
    }
    .container {
      max-width: 800px;
      margin: 40px auto;
      background: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    h2, h4 {
      color: var(--dark-green);
    }
    .review-card {
      border: 1px solid var(--primary-green);
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    }
    .review-card img {
      width: 100px;
      height: 100px;
      object-fit: cover;
      border-radius: 50%;
      margin-right: 15px;
    }
    .btn-delete {
      background-color: #e74c3c;
      border-color: #e74c3c;
      color: #fff;
    }
    .btn-delete:hover {
      background-color: #c0392b;
      border-color: #c0392b;
    }
  </style>
        <main class="col-md-9 col-lg-10 ms-sm-auto px-md-2">
          <div class="header">BERITA / ARTIKEL</div>
          <button class="btn btn-add mb-3 mt-3">
            <a href="admin-add-berita-artikel" class="add"><i class="fas fa-plus"></i> Tambah Berita/Artikel</a>
          </button>

          <!-- Tabel -->
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>No</th>
                  <th>Judul</th>
                  <th>Konten</th>
                  <th>Tanggal Upload</th>
                  <th>Gambar</th>
                  <th>Aksi</th>
                </tr>
              </thead>
              <tbody id="newsTableBody">
                <!-- Data berita akan dimuat secara dinamis di sini -->
              </tbody>
            </table>
          </div>
        </div>
      </main>
  <div class="container">
    <h2 class="text-center mb-4">Kelola Alumni Reviews</h2>
    
    <!-- Form untuk Tambah / Edit Alumni Review -->
    <div class="mb-4">
      <h4 id="formTitle">Tambah Alumni Review</h4>
      <form id="alumniReviewForm">
        
        <!-- Input tersembunyi untuk menyimpan ID (untuk mode edit) -->
        <input type="hidden" id="reviewId" name="reviewId" />
        <div class="mb-3">
          <label for="reviewText" class="<form-l></form-l>abel">Review</label>
          <textarea class="form-control" id="reviewText" name="review" rows="4" required></textarea>
        </div>
        <div class="mb-3">
          <label for="alumniName" class="form-label">Nama Alumni</label>
          <input type="text" class="form-control" id="alumniName" name="alumniName" required>
        </div>
        <div class="mb-3">
          <label for="alumniYear" class="form-label">Tahun Alumni</label>
          <input type="text" class="form-control" id="alumniYear" name="alumniYear" required>
        </div>
        <div class="mb-3">
          <label for="reviewImage" class="form-label">Upload Foto (opsional)</label>
          <input type="file" class="form-control" id="reviewImage" name="image">
        </div>
        <div class="d-flex">
          <button type="submit" class="btn btn-success me-2" id="submitBtn">Tambah Review</button>
          <button type="button" class="btn btn-secondary" id="cancelEditBtn" style="display: none;">Batal Edit</button>
        </div>
      </form>
    </div>
    
    <!-- Daftar Alumni Reviews -->
    <div id="reviewsList">
      <!-- Review cards akan dimuat secara dinamis di sini -->
    </div>
  </div>

  <script>
    // Fungsi untuk memuat semua alumni reviews dari API
    async function loadAlumniReviews() {
      try {
        const response = await fetch('/api/alumniReview');
        if (!response.ok) throw new Error('Failed to fetch alumni reviews');
        const reviews = await response.json();
        const container = document.getElementById('reviewsList');
        container.innerHTML = "";
        if (reviews.length === 0) {
          container.innerHTML = "<p class='text-center'>Tidak ada alumni review.</p>";
          return;
        }
        reviews.forEach(review => {
          const card = document.createElement('div');
          card.className = "review-card";
          card.innerHTML = `
            <img src="${review.imageUrl ? review.imageUrl : 'img/default-alumni.jpg'}" alt="Foto Alumni">
            <div class="flex-grow-1">
              <p>"${review.review}"</p>
              <p><strong>${review.alumniName}</strong> - Alumni Tahun ${review.alumniYear}</p>
              <button class="btn btn-primary btn-sm me-2" onclick="editReview(${review.id})">Edit</button>
              <button class="btn btn-danger btn-sm" onclick="deleteReview(${review.id})">Hapus</button>
            </div>
          `;
          container.appendChild(card);
        });
      } catch (error) {
        console.error("Error loading alumni reviews:", error);
        alert("Terjadi kesalahan saat memuat alumni reviews.");
      }
    }

    // Fungsi untuk mengirim data form (tambah atau update)
    async function submitAlumniReviewForm(e) {
      e.preventDefault();
      const reviewId = document.getElementById('reviewId').value;
      const form = document.getElementById('alumniReviewForm');
      const formData = new FormData(form);
      try {
        let response;
        if (reviewId) {
          // Update review
          response = await fetch(`/api/alumniReview/${reviewId}`, {
            method: 'PUT',
            body: formData
          });
        } else {
          // Tambah review baru
          response = await fetch('/api/alumniReview', {
            method: 'POST',
            body: formData
          });
        }
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          resetAlumniReviewForm();
          loadAlumniReviews();
        } else {
          alert(result.message || "Gagal menyimpan alumni review.");
        }
      } catch (error) {
        console.error("Error submitting alumni review:", error);
        alert("Terjadi kesalahan saat mengirim data.");
      }
    }

    // Fungsi untuk mereset form ke mode tambah
    function resetAlumniReviewForm() {
      document.getElementById('alumniReviewForm').reset();
      document.getElementById('reviewId').value = "";
      document.getElementById('formTitle').innerText = "Tambah Alumni Review";
      document.getElementById('submitBtn').innerText = "Tambah Review";
      document.getElementById('cancelEditBtn').style.display = "none";
    }

    // Fungsi untuk mengisi form dengan data review untuk mode edit
    async function editReview(id) {
      try {
        // Ambil semua review, kemudian cari berdasarkan id
        const response = await fetch('/api/alumniReview');
        if (!response.ok) throw new Error("Failed to fetch alumni reviews");
        const reviews = await response.json();
        const review = reviews.find(r => r.id === id);
        if (!review) {
          alert("Alumni review tidak ditemukan.");
          return;
        }
        document.getElementById('reviewId').value = review.id;
        document.getElementById('reviewText').value = review.review;
        document.getElementById('alumniName').value = review.alumniName;
        document.getElementById('alumniYear').value = review.alumniYear;
        // Note: Input file tidak dapat diisi secara otomatis
        document.getElementById('formTitle').innerText = "Edit Alumni Review";
        document.getElementById('submitBtn').innerText = "Update Review";
        document.getElementById('cancelEditBtn').style.display = "inline-block";
      } catch (error) {
        console.error("Error editing review:", error);
        alert("Terjadi kesalahan saat mengambil data untuk edit.");
      }
    }

    // Fungsi untuk menghapus review berdasarkan ID
    async function deleteReview(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus alumni review ini?")) return;
      try {
        const response = await fetch(`/api/alumniReview/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          loadAlumniReviews();
        } else {
          alert(result.message || "Gagal menghapus alumni review.");
        }
      } catch (error) {
        console.error("Error deleting review:", error);
        alert("Terjadi kesalahan saat menghapus alumni review.");
      }
    }

    document.getElementById('alumniReviewForm').addEventListener('submit', submitAlumniReviewForm);
    document.getElementById('cancelEditBtn').addEventListener('click', resetAlumniReviewForm);
    document.addEventListener("DOMContentLoaded", loadAlumniReviews);
  </script>

  <!-- Bootstrap JS Bundle -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  ></script>
      <script>

      // Fungsi untuk mengambil dan menampilkan daftar berita di tabel halaman admin

      async function loadAdminNews() {
        try {
          // Lakukan request GET ke endpoint untuk mengambil semua berita
          const response = await fetch('/api/news');
          const newsList = await response.json();

          // Pastikan di HTML, <tbody> dari tabel memiliki id="newsTableBody"
          const tbody = document.getElementById('newsTableBody');
          tbody.innerHTML = ''; // Bersihkan konten tabel

          // Iterasi setiap berita dan buat baris tabel untuk menampilkannya
          newsList.forEach((news, index) => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${index + 1}.</td>
              <td><strong>${news.title}</strong></td>
              <td>${
                news.description.length > 50
                  ? news.description.substring(0, 50) + '...'
                  : news.description
              }</td>
              <td><strong>${new Date(news.uploadTime).toLocaleDateString()}</strong></td>
              <td>${
                news.imageUrl
                  ? `<img src="${news.imageUrl}" alt="Gambar" style="max-width: 100px;">`
                  : ''
              }</td>
              <td>
                <a href="admin-edit-berita-artikel.html?id=${news.id}" class="btn btn-edit btn-sm">
                  <i class="fas fa-edit"></i> Edit
                </a>
                <button onclick="deleteNews(${news.id})" class="btn btn-delete btn-sm">
                  <i class="fas fa-trash-alt"></i> Hapus
                </button>
              </td>
            `;
            tbody.appendChild(tr);
          });
        } catch (error) {
          console.error('Error memuat data berita:', error);
          alert('Terjadi kesalahan saat memuat data berita.');
        }
      }

      // Fungsi untuk menghapus berita berdasarkan ID, termasuk menghapus file gambar jika ada
      async function deleteNews(id) {
        if (!confirm('Apakah Anda yakin ingin menghapus berita ini?')) return;
        try {
          const response = await fetch(`/api/news/${id}`, {
            method: 'DELETE'
          });
          const result = await response.json();
          if (response.ok) {
            alert(result.message);
            loadAdminNews();
          } else {
            alert(result.message || 'Gagal menghapus berita.');
          }
        } catch (error) {
          console.error('Error menghapus berita:', error);
          alert('Terjadi kesalahan saat menghapus berita.');
        }
      }

      // Panggil fungsi loadAdminNews saat halaman selesai dimuat
      document.addEventListener('DOMContentLoaded', loadAdminNews);
    </script>
</body>
</html>
