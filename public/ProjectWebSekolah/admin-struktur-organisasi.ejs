<%- include('partials/header-admin') %>

  <!-- Custom CSS -->
  <style>
    body {
      background-color: #f5f5f5;
      font-family: 'Poppins', sans-serif;
      color: #2c3e50;
      padding: 20px;
    }
    .container {
      max-width: 900px;
      margin: 20px auto;
      padding: 20px 30px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    h2, h3 {
      text-align: center;
      margin-bottom: 20px;
      color: #27ae60;
    }
    .form-label {
      font-weight: 600;
    }
    .btn-success {
      background-color: #2ecc71;
      border: none;
    }
    .btn-danger {
      background-color: #e74c3c;
      border: none;
    }
    table {
      width: 100%;
      margin-top: 20px;
    }
    th, td {
      text-align: center;
      vertical-align: middle;
      padding: 8px;
    }
  </style>
</head>
<body>
  <!-- Navbar sederhana -->
  <div class="container pt-28">
    <h2>Kelola Struktur Organisasi Sekolah</h2>

    <!-- Form untuk Tambah/Update Struktur Organisasi -->
    <form id="strukturForm" class="mb-4">
      <input type="hidden" id="strukturId" name="strukturId">
      <div class="mb-3">
        <label for="position" class="form-label">Jabatan/Posisi</label>
        <input type="text" class="form-control" id="position" name="position" placeholder="Contoh: Kepala Sekolah" required>
      </div>
      <div class="mb-3">
        <label for="name" class="form-label">Nama Lengkap</label>
        <input type="text" class="form-control" id="name" name="name" placeholder="Contoh: Dr. Ahmad" required>
      </div>
      <div class="mb-3">
        <label for="parentId" class="form-label">ID Atasan (Parent ID)</label>
        <input type="number" class="form-control" id="parentId" name="parentId" placeholder="Kosongkan jika tidak ada">
      </div>
      <div class="mb-3">
        <label for="order" class="form-label">Urutan (Order)</label>
        <input type="number" class="form-control" id="order" name="order" placeholder="Contoh: 0">
      </div>
      <div class="d-flex">
        <button type="submit" class="btn btn-success me-2" id="submitStrukturBtn">Simpan</button>
        <button type="button" class="btn btn-secondary" id="resetStrukturBtn">Reset</button>
      </div>
    </form>

    <!-- Tabel Daftar Struktur Organisasi -->
    <h3 class="mb-3">Daftar Struktur Organisasi</h3>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>ID</th>
          <th>Posisi</th>
          <th>Nama</th>
          <th>Parent ID</th>
          <th>Order</th>
          <th>Aksi</th>
        </tr>
      </thead>
      <tbody id="strukturList">
        <!-- Data akan dimuat secara dinamis -->
      </tbody>
    </table>
  </div>

  <!-- JavaScript -->
  <script>
    // Fungsi untuk memuat data struktur organisasi dari API
    async function loadStrukturOrganisasi() {
      try {
        const response = await fetch('/api/strukturorganisasi');
        if (!response.ok) throw new Error('Gagal mengambil data struktur organisasi');
        const data = await response.json();
        const tbody = document.getElementById('strukturList');
        tbody.innerHTML = "";
        data.forEach(item => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${item.id}</td>
            <td>${item.position}</td>
            <td>${item.name}</td>
            <td>${item.parentId || '-'}</td>
            <td>${item.order}</td>
            <td>
              <button class="btn btn-success btn-sm" onclick="editStruktur(${item.id})">Edit</button>
              <button class="btn btn-danger btn-sm" onclick="deleteStruktur(${item.id})">Hapus</button>
            </td>
          `;
          tbody.appendChild(tr);
        });
      } catch (error) {
        console.error("Error loading struktur organisasi:", error);
        alert("Terjadi kesalahan saat memuat data struktur organisasi.");
      }
    }

    // Form submission untuk tambah atau update data struktur organisasi
    document.getElementById('strukturForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const id = document.getElementById('strukturId').value;
      const payload = {
        position: document.getElementById('position').value,
        name: document.getElementById('name').value,
        parentId: document.getElementById('parentId').value ? parseInt(document.getElementById('parentId').value) : null,
        order: document.getElementById('order').value ? parseInt(document.getElementById('order').value) : 0
      };
      try {
        let response;
        if (id) {
          // Update record
          response = await fetch(`/api/strukturorganisasi/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
        } else {
          // Create new record
          response = await fetch('/api/strukturorganisasi', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
        }
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          document.getElementById('strukturForm').reset();
          loadStrukturOrganisasi();
        } else {
          alert(result.message || "Gagal menyimpan data.");
        }
      } catch (error) {
        console.error("Error submitting form:", error);
        alert("Terjadi kesalahan saat mengirim data.");
      }
    });

    // Fungsi untuk mengisi form dengan data yang akan diedit
    async function editStruktur(id) {
      try {
        const response = await fetch('/api/strukturorganisasi');
        if (!response.ok) throw new Error('Gagal mengambil data struktur organisasi');
        const data = await response.json();
        const record = data.find(item => item.id === id);
        if (record) {
          document.getElementById('strukturId').value = record.id;
          document.getElementById('position').value = record.position;
          document.getElementById('name').value = record.name;
          document.getElementById('parentId').value = record.parentId || "";
          document.getElementById('order').value = record.order;
        }
      } catch (error) {
        console.error("Error editing struktur organisasi:", error);
        alert("Terjadi kesalahan saat mengambil data untuk edit.");
      }
    }

    // Fungsi untuk menghapus data struktur organisasi
    async function deleteStruktur(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus data ini?")) return;
      try {
        const response = await fetch(`/api/strukturorganisasi/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          loadStrukturOrganisasi();
        } else {
          alert(result.message || "Gagal menghapus data.");
        }
      } catch (error) {
        console.error("Error deleting struktur organisasi:", error);
        alert("Terjadi kesalahan saat menghapus data.");
      }
    }

    // Reset button untuk form
    document.getElementById('resetStrukturBtn').addEventListener('click', function() {
      document.getElementById('strukturForm').reset();
    });

    document.addEventListener("DOMContentLoaded", loadStrukturOrganisasi);
  </script>

  <!-- Bootstrap JS Bundle -->
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
    crossorigin="anonymous"
  ></script>
</body>
</html>
