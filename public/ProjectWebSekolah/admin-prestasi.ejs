<%- include('partials/header-admin') %>
  <style>
    body {
      background-color: #f5f5f5;
      font-family: 'Poppins', sans-serif;
    }
    .container {
      max-width: 1000px;
      margin: 20px auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    h2 {
      text-align: center;
      margin-bottom: 20px;
      color: #27ae60;
    }
    .preview-card {
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 10px;
      margin-top: 20px;
    }
    .preview-card img {
      max-width: 100%;
      height: auto;
    }
    .card-img-top {
      height: 200px;
      object-fit: cover;
    }
  </style>
  <div class="container pt-28">
    <h2>Kelola Prestasi</h2>

    <!-- Form Tambah/Edit Prestasi -->
    <form id="prestasiForm" enctype="multipart/form-data">
      <!-- Hidden input untuk ID (jika edit) -->
      <input type="hidden" id="prestasiId" name="prestasiId">
      <div class="mb-3">
        <label for="title" class="form-label">Judul Prestasi</label>
        <input type="text" class="form-control" id="title" name="title" placeholder="Masukkan judul prestasi" required>
      </div>
      <div class="mb-3">
        <label for="pringkat" class="form-label">Peringkat Juara</label>
        <input type="text" class="form-control" id="pringkat" name="pringkat" placeholder="Masukkan peringkat juara" required>
      </div>
      <div class="mb-3">
        <label for="description" class="form-label">Deskripsi</label>
        <textarea class="form-control" id="description" name="description" rows="3" placeholder="Masukkan deskripsi prestasi" required></textarea>
      </div>
      <div class="mb-3">
        <label for="image" class="form-label">Upload Gambar</label>
        <input type="file" class="form-control" id="image" name="image">
      </div>
      <div class="d-flex">
        <button type="submit" class="btn btn-success me-2" id="submitPrestasiBtn">Simpan Prestasi</button>
        <button type="reset" class="btn btn-secondary" id="resetPrestasiBtn">Reset Form</button>
      </div>
    </form>

    <!-- Preview Prestasi -->
    <div class="preview-card" id="prestasiPreview">
      <img src="img/default-prestasi.jpg" alt="Preview Gambar" id="previewImage">
      <h5 id="previewTitle">Judul Prestasi</h5>
      <p id="previewPeringkat"><strong>Peringkat: </strong> -</p>
      <p id="previewDescription">Deskripsi akan tampil di sini.</p>
    </div>

    <!-- Daftar Prestasi (Card Grid) -->
    <div class="card-grid mt-4">
      <h3 class="text-center">Daftar Prestasi</h3>
      <div class="row" id="prestasiList">
        <!-- Data prestasi akan dimuat secara dinamis -->
      </div>
    </div>
  </div>

  <!-- Bootstrap JS Bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Fungsi untuk update preview saat input berubah
    function updatePrestasiPreview() {
      const title = document.getElementById('title').value;
      const pringkat = document.getElementById('pringkat').value;
      const description = document.getElementById('description').value;
      
      document.getElementById('previewTitle').innerText = title || 'Judul Prestasi';
      document.getElementById('previewPeringkat').innerHTML = `<strong>Peringkat: </strong> ${pringkat || '-'}`;
      document.getElementById('previewDescription').innerText = description || 'Deskripsi akan tampil di sini.';
    }
    
    document.getElementById('title').addEventListener('input', updatePrestasiPreview);
    document.getElementById('pringkat').addEventListener('input', updatePrestasiPreview);
    document.getElementById('description').addEventListener('input', updatePrestasiPreview);
    
    // Preview gambar ketika file diupload
    document.getElementById('image').addEventListener('change', function(){
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById('previewImage').src = e.target.result;
        };
        reader.readAsDataURL(file);
      } else {
        document.getElementById('previewImage').src = 'img/default-prestasi.jpg';
      }
    });
    
    // Fungsi untuk memuat data prestasi dari API
    async function loadPrestasi() {
      try {
        const response = await fetch('api/prestasi');
        const prestasiList = await response.json();
        const container = document.getElementById('prestasiList');
        container.innerHTML = '';
        prestasiList.forEach(prestasi => {
          const col = document.createElement('div');
          col.className = 'col-12 col-sm-6 col-md-4';
          col.innerHTML = `
            <div class="card h-100">
              <img src="${prestasi.imageUrl || 'img/default-prestasi.jpg'}" class="card-img-top" alt="Prestasi">
              <div class="card-body">
                <h5 class="card-title">${prestasi.title}</h5>
                <p class="card-text"><strong>${prestasi.pringkat}</strong></p>
                <p class="card-text">${prestasi.description}</p>
              </div>
              <div class="card-footer d-flex justify-content-between">
                <button class="btn btn-primary btn-sm" onclick="editPrestasi(${prestasi.id})">
                  <i class="bi bi-pencil"></i> Edit
                </button>
                <button class="btn btn-danger btn-sm" onclick="deletePrestasi(${prestasi.id})">
                  <i class="bi bi-trash"></i> Hapus
                </button>
              </div>
            </div>
          `;
          container.appendChild(col);
        });
      } catch (error) {
        console.error("Error loading prestasi:", error);
        alert("Terjadi kesalahan saat memuat data prestasi.");
      }
    }
    
    // Panggil loadPrestasi saat DOM selesai dimuat
    document.addEventListener("DOMContentLoaded", loadPrestasi);
    
    // Handler untuk form submit (tambah atau update prestasi)
    document.getElementById('prestasiForm').addEventListener('submit', async function(e){
      e.preventDefault();
      const form = e.target;
      const formData = new FormData(form);
      const prestasiId = document.getElementById('prestasiId').value;
      let url = 'api/prestasi';
      let method = 'POST';
      if(prestasiId) {
        url += `/${prestasiId}`;
        method = 'PUT';
      }
      
      try {
        const response = await fetch(url, {
          method,
          body: formData
        });
        const result = await response.json();
        if(response.ok) {
          alert(result.message);
          form.reset();
          document.getElementById('prestasiId').value = '';
          document.getElementById('previewImage').src = 'img/default-prestasi.jpg';
          updatePrestasiPreview();
          loadPrestasi();
        } else {
          alert(result.message || "Gagal menyimpan data prestasi.");
        }
      } catch (error) {
        console.error("Error submitting prestasi form:", error);
        alert("Terjadi kesalahan saat mengirim data.");
      }
    });
    
    // Fungsi untuk edit prestasi: Mengisi form dengan data dari record yang dipilih
    async function editPrestasi(id) {
      try {
        const response = await fetch(`api/prestasi/${id}`);
        const prestasi = await response.json();
        document.getElementById('prestasiId').value = prestasi.id;
        document.getElementById('title').value = prestasi.title;
        document.getElementById('pringkat').value = prestasi.pringkat;
        document.getElementById('description').value = prestasi.description;
        updatePrestasiPreview();
        document.getElementById('previewImage').src = prestasi.imageUrl || 'img/default-prestasi.jpg';
      } catch (error) {
        console.error("Error editing prestasi:", error);
        alert("Terjadi kesalahan saat memuat data prestasi untuk diedit.");
      }
    }
    
    // Fungsi untuk menghapus prestasi
    async function deletePrestasi(id) {
      if (!confirm("Apakah Anda yakin ingin menghapus data prestasi ini?")) return;
      try {
        const response = await fetch(`api/prestasi/${id}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if(response.ok) {
          alert(result.message);
          loadPrestasi();
        } else {
          alert(result.message || "Gagal menghapus data prestasi.");
        }
      } catch (error) {
        console.error("Error deleting prestasi:", error);
        alert("Terjadi kesalahan saat menghapus data.");
      }
    }
  </script>
  <script src="js/guru.js"></script>
</body>
</html>
